#!/usr/bin/env node
/**
 * Module dependencies.
 */
// A tool to find an open port or domain socket on the machine
var portfinder = require("portfinder");
var cluster = require("cluster");
// comment below line to start cluster with maximum workers
var workers = 1;
// uncomment below line to start cluster with maximum workers
// var workers = process.env.WORKERS || require('os').cpus().length;
var port = 3000;
var portSpan = 999;

if (cluster.isMaster) {
  portfinder.getPort(
    {
      port: port, // minimum port number
      stopPort: port + portSpan, // maximum port number
    },
    function (err, openPort) {
      if (err) throw err;
      port = openPort;
      process.env["PORT"] = openPort;
      console.log("🚀 Manila Payroll Server will start on port " + port);
      console.log(
        "Master cluster is running on %s with %s workers",
        process.pid,
        workers
      );
      for (var i = 0; i < workers; ++i) {
        var worker = cluster.fork().process;
        console.log("worker %s on %s started", i + 1, worker.pid);
      }
      cluster.on("exit", function (worker, code, signal) {
        console.log("worker %s died. restarting...", worker.process.pid);
        cluster.fork();
      });
    }
  );
}

if (cluster.isWorker) {
  var app = require("../app");
  var debug = require("debug")("manila-payroll-backend:server");
  var http = require("http");
  // Removed ON_DEATH module as it's not needed and causing issues
  var { pool } = require("../dbconfig");

  /**
   * Get port from environment and store in Express.
   */
  port = normalizePort(process.env["PORT"]);
  app.set("port", port);

  /**
   * Create HTTP server.
   */
  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  /**
   * Normalize a port into a number, string, or false.
   */
  function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
      // named pipe
      return val;
    }
    if (port >= 0) {
      // port number
      return port;
    }
    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */
  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }
    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
    console.log(
      "✅ Manila Payroll Server running on http://localhost:" + addr.port
    );
    console.log("📊 Health check: http://localhost:" + addr.port + "/health");
    console.log("📋 API Base URL: http://localhost:" + addr.port + "/api");
  }

  /**
   * Graceful shutdown handlers
   */
  process.on("SIGTERM", function () {
    console.log("\n🛑 SIGTERM received, shutting down gracefully...");
    if (pool && pool.end) {
      pool
        .end()
        .then(() => {
          console.log("✅ All database connections closed");
          server.close(() => {
            console.log("✅ Server closed");
            process.exit(0);
          });
        })
        .catch((err) => {
          console.error("❌ Error closing database connections:", err);
          process.exit(1);
        });
    } else {
      server.close(() => {
        console.log("✅ Server closed");
        process.exit(0);
      });
    }
  });

  process.on("SIGINT", function () {
    console.log("\n🛑 SIGINT received, shutting down gracefully...");
    if (pool && pool.end) {
      pool
        .end()
        .then(() => {
          console.log("✅ All database connections closed");
          server.close(() => {
            console.log("✅ Server closed");
            process.exit(0);
          });
        })
        .catch((err) => {
          console.error("❌ Error closing database connections:", err);
          process.exit(1);
        });
    } else {
      server.close(() => {
        console.log("✅ Server closed");
        process.exit(0);
      });
    }
  });

  console.log("🚀 Manila Payroll Server Started on http://localhost:" + port);
  console.log("📋 Ready to handle requests!\n");
}
